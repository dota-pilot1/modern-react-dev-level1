React Router 기본 구조 & Outlet 개념 정리

1. Outlet 이란?
- react-router-dom 이 제공하는 특별한 placeholder 컴포넌트.
- 부모(Route element 로 지정된 레이아웃)가 렌더링될 때, 자식 라우트가 일치하면 그 자식의 element 가 <Outlet /> 위치에 삽입됨.
- 즉, 레이아웃(공통 UI)과 개별 페이지(변하는 영역)를 자연스럽게 분리하는 도구.

2. 기본적인 페이지 렌더링 구조 (권장 패턴)
App.tsx:
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Layout from './components/Layout';
import Home from './pages/Home';
import IBSheetGrid from './pages/IBSheetGrid';

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route element={<Layout />}> {/* 공통 레이아웃 */}
          <Route index element={<Home />} />
          <Route path="grid" element={<IBSheetGrid />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}
export default App;

Layout.tsx (핵심 부분):
import { Outlet } from 'react-router-dom';

function Layout() {
  return (
    <div>
      <Header />
      <main>
        <Outlet /> {/* 각 페이지가 이 위치에 렌더링 */}
      </main>
    </div>
  );
}

3. 왜 이 구조가 기본/표준에 가깝나?
- 레이아웃 교체/중첩 용이 (DashboardLayout, AuthLayout 등 추가하기 쉬움)
- 특정 경로만 다른 UI 를 적용하기 쉬움 (ex: /login 은 레이아웃 제외)
- Data Router(createBrowserRouter) 확장 시 동일 개념 유지
- 에러/로딩 경계, 코드 스플리팅, 권한 가드 구성 포인트가 명확

4. 기존 Wrapping 패턴과 차이
Wrapping (Layout 이 Routes 를 감쌌던 방식):
<BrowserRouter>
  <Layout>
    <Routes>...</Routes>
  </Layout>
</BrowserRouter>
- 단순하지만 하위 라우트별 레이아웃 변화가 어렵고, 중첩 레이아웃 구성 한계.
Outlet 패턴:
<Route element={<Layout />}> <Route ... /> </Route>
- 레이아웃이 라우팅 트리에 포함되어 계층 관리 용이.

5. 라우트 추가 시 절차
(1) pages 폴더에 새 페이지 컴포넌트 작성 (ex: Report.tsx)
(2) App.tsx 또는 routes 설정 파일에서:
    <Route path="report" element={<Report />} /> 추가 (Layout 내부 children)
(3) 네비게이션 메뉴(navItems 등)에 링크 추가.

6. 확장 포인트
- Error Boundary: <Route element={<Layout />} errorElement={<ErrorPage />}> ...
- 인증: <Route element={<ProtectedLayout />}> 내부에서 권한 체크 후 <Outlet />
- Lazy 로딩: const Report = lazy(() => import('./pages/Report')); + <Suspense fallback> 래핑
- 데이터 프리패칭(Data Router): children route 객체에 loader 정의

7. 가장 작은 기억 포인트
- 공통 UI 는 Route 의 element 로 둔다.
- 변하는 페이지 영역은 <Outlet /> 위치에 꽂힌다.
- index 는 부모 경로("/")의 기본 페이지.

8. 추가로 살펴볼 키워드
- createBrowserRouter / RouterProvider (Data Router)
- loader / action / useLoaderData
- useNavigate / useLocation / useParams
- useNavigation (전환 상태) / ScrollRestoration

9. 연습 아이디어
- 로그인 없는 /login 페이지를 레이아웃 밖에 추가해보기
- /admin 전용 AdminLayout 하나 더 만들어 중첩 레이아웃 체험
- IBSheetGrid 페이지 lazy 로딩 적용 + Suspense

요약
Outlet 패턴 = "레이아웃을 라우트 계층에 포함 + 자식 페이지를 <Outlet /> 으로 주입".
이를 익히면 실무에서 레이아웃/권한/에러/데이터 관리가 훨씬 구조적이고 확장 가능해진다.
